(function(I){typeof define=="function"&&define.amd?define(I):I()})(function(){"use strict";/*! Capacitor: https://capacitorjs.com/ - MIT License */const I=i=>{const e=new Map;e.set("web",{name:"web"});const t=i.CapacitorPlatforms||{currentPlatform:{name:"web"},platforms:e},r=(n,a)=>{t.platforms.set(n,a)},s=n=>{t.platforms.has(n)&&(t.currentPlatform=t.platforms.get(n))};return t.addPlatform=r,t.setPlatform=s,t},W=(i=>i.CapacitorPlatforms=I(i))(typeof globalThis<"u"?globalThis:typeof self<"u"?self:typeof window<"u"?window:typeof global<"u"?global:{});W.addPlatform,W.setPlatform;var v;(function(i){i.Unimplemented="UNIMPLEMENTED",i.Unavailable="UNAVAILABLE"})(v||(v={}));class x extends Error{constructor(e,t,r){super(e),this.message=e,this.code=t,this.data=r}}const V=i=>{var e,t;return i!=null&&i.androidBridge?"android":!((t=(e=i==null?void 0:i.webkit)===null||e===void 0?void 0:e.messageHandlers)===null||t===void 0)&&t.bridge?"ios":"web"},G=i=>{var e,t,r,s,n;const a=i.CapacitorCustomPlatform||null,o=i.Capacitor||{},c=o.Plugins=o.Plugins||{},l=i.CapacitorPlatforms,D=()=>a!==null?a.name:V(i),q=((e=l==null?void 0:l.currentPlatform)===null||e===void 0?void 0:e.getPlatform)||D,N=()=>q()!=="web",de=((t=l==null?void 0:l.currentPlatform)===null||t===void 0?void 0:t.isNativePlatform)||N,me=u=>{const h=k.get(u);return!!(h!=null&&h.platforms.has(q())||B(u))},pe=((r=l==null?void 0:l.currentPlatform)===null||r===void 0?void 0:r.isPluginAvailable)||me,ye=u=>{var h;return(h=o.PluginHeaders)===null||h===void 0?void 0:h.find(j=>j.name===u)},B=((s=l==null?void 0:l.currentPlatform)===null||s===void 0?void 0:s.getPluginHeader)||ye,we=u=>i.console.error(u),be=(u,h,j)=>Promise.reject(`${j} does not have an implementation of "${h}".`),k=new Map,fe=(u,h={})=>{const j=k.get(u);if(j)return console.warn(`Capacitor plugin "${u}" already registered. Cannot register plugins twice.`),j.proxy;const g=q(),C=B(u);let w;const ve=async()=>(!w&&g in h?w=typeof h[g]=="function"?w=await h[g]():w=h[g]:a!==null&&!w&&"web"in h&&(w=typeof h.web=="function"?w=await h.web():w=h.web),w),Pe=(d,m)=>{var y,b;if(C){const f=C==null?void 0:C.methods.find(p=>m===p.name);if(f)return f.rtype==="promise"?p=>o.nativePromise(u,m.toString(),p):(p,T)=>o.nativeCallback(u,m.toString(),p,T);if(d)return(y=d[m])===null||y===void 0?void 0:y.bind(d)}else{if(d)return(b=d[m])===null||b===void 0?void 0:b.bind(d);throw new x(`"${u}" plugin is not implemented on ${g}`,v.Unimplemented)}},$=d=>{let m;const y=(...b)=>{const f=ve().then(p=>{const T=Pe(p,d);if(T){const R=T(...b);return m=R==null?void 0:R.remove,R}else throw new x(`"${u}.${d}()" is not implemented on ${g}`,v.Unimplemented)});return d==="addListener"&&(f.remove=async()=>m()),f};return y.toString=()=>`${d.toString()}() { [capacitor code] }`,Object.defineProperty(y,"name",{value:d,writable:!1,configurable:!1}),y},H=$("addListener"),Q=$("removeListener"),Se=(d,m)=>{const y=H({eventName:d},m),b=async()=>{const p=await y;Q({eventName:d,callbackId:p},m)},f=new Promise(p=>y.then(()=>p({remove:b})));return f.remove=async()=>{console.warn("Using addListener() without 'await' is deprecated."),await b()},f},_=new Proxy({},{get(d,m){switch(m){case"$$typeof":return;case"toJSON":return()=>({});case"addListener":return C?Se:H;case"removeListener":return Q;default:return $(m)}}});return c[u]=_,k.set(u,{name:u,proxy:_,platforms:new Set([...Object.keys(h),...C?[g]:[]])}),_},ge=((n=l==null?void 0:l.currentPlatform)===null||n===void 0?void 0:n.registerPlugin)||fe;return o.convertFileSrc||(o.convertFileSrc=u=>u),o.getPlatform=q,o.handleError=we,o.isNativePlatform=de,o.isPluginAvailable=pe,o.pluginMethodNoop=be,o.registerPlugin=ge,o.Exception=x,o.DEBUG=!!o.DEBUG,o.isLoggingEnabled=!!o.isLoggingEnabled,o.platform=o.getPlatform(),o.isNative=o.isNativePlatform(),o},L=(i=>i.Capacitor=G(i))(typeof globalThis<"u"?globalThis:typeof self<"u"?self:typeof window<"u"?window:typeof global<"u"?global:{}),P=L.registerPlugin;L.Plugins;class S{constructor(e){this.listeners={},this.windowListeners={},e&&(console.warn(`Capacitor WebPlugin "${e.name}" config object was deprecated in v3 and will be removed in v4.`),this.config=e)}addListener(e,t){this.listeners[e]||(this.listeners[e]=[]),this.listeners[e].push(t);const s=this.windowListeners[e];s&&!s.registered&&this.addWindowListener(s);const n=async()=>this.removeListener(e,t),a=Promise.resolve({remove:n});return Object.defineProperty(a,"remove",{value:async()=>{console.warn("Using addListener() without 'await' is deprecated."),await n()}}),a}async removeAllListeners(){this.listeners={};for(const e in this.windowListeners)this.removeWindowListener(this.windowListeners[e]);this.windowListeners={}}notifyListeners(e,t){const r=this.listeners[e];r&&r.forEach(s=>s(t))}hasListeners(e){return!!this.listeners[e].length}registerWindowListener(e,t){this.windowListeners[t]={registered:!1,windowEventName:e,pluginEventName:t,handler:r=>{this.notifyListeners(t,r)}}}unimplemented(e="not implemented"){return new L.Exception(e,v.Unimplemented)}unavailable(e="not available"){return new L.Exception(e,v.Unavailable)}async removeListener(e,t){const r=this.listeners[e];if(!r)return;const s=r.indexOf(t);this.listeners[e].splice(s,1),this.listeners[e].length||this.removeWindowListener(this.windowListeners[e])}addWindowListener(e){window.addEventListener(e.windowEventName,e.handler),e.registered=!0}removeWindowListener(e){e&&(window.removeEventListener(e.windowEventName,e.handler),e.registered=!1)}}const J=i=>encodeURIComponent(i).replace(/%(2[346B]|5E|60|7C)/g,decodeURIComponent).replace(/[()]/g,escape),U=i=>i.replace(/(%[\dA-F]{2})+/gi,decodeURIComponent);class K extends S{async getCookies(){const e=document.cookie,t={};return e.split(";").forEach(r=>{if(r.length<=0)return;let[s,n]=r.replace(/=/,"CAP_COOKIE").split("CAP_COOKIE");s=U(s).trim(),n=U(n).trim(),t[s]=n}),t}async setCookie(e){try{const t=J(e.key),r=J(e.value),s=`; expires=${(e.expires||"").replace("expires=","")}`,n=(e.path||"/").replace("path=",""),a=e.url!=null&&e.url.length>0?`domain=${e.url}`:"";document.cookie=`${t}=${r||""}${s}; path=${n}; ${a};`}catch(t){return Promise.reject(t)}}async deleteCookie(e){try{document.cookie=`${e.key}=; Max-Age=0`}catch(t){return Promise.reject(t)}}async clearCookies(){try{const e=document.cookie.split(";")||[];for(const t of e)document.cookie=t.replace(/^ +/,"").replace(/=.*/,`=;expires=${new Date().toUTCString()};path=/`)}catch(e){return Promise.reject(e)}}async clearAllCookies(){try{await this.clearCookies()}catch(e){return Promise.reject(e)}}}P("CapacitorCookies",{web:()=>new K});const z=async i=>new Promise((e,t)=>{const r=new FileReader;r.onload=()=>{const s=r.result;e(s.indexOf(",")>=0?s.split(",")[1]:s)},r.onerror=s=>t(s),r.readAsDataURL(i)}),Y=(i={})=>{const e=Object.keys(i);return Object.keys(i).map(s=>s.toLocaleLowerCase()).reduce((s,n,a)=>(s[n]=i[e[a]],s),{})},X=(i,e=!0)=>i?Object.entries(i).reduce((r,s)=>{const[n,a]=s;let o,c;return Array.isArray(a)?(c="",a.forEach(l=>{o=e?encodeURIComponent(l):l,c+=`${n}=${o}&`}),c.slice(0,-1)):(o=e?encodeURIComponent(a):a,c=`${n}=${o}`),`${r}&${c}`},"").substr(1):null,Z=(i,e={})=>{const t=Object.assign({method:i.method||"GET",headers:i.headers},e),s=Y(i.headers)["content-type"]||"";if(typeof i.data=="string")t.body=i.data;else if(s.includes("application/x-www-form-urlencoded")){const n=new URLSearchParams;for(const[a,o]of Object.entries(i.data||{}))n.set(a,o);t.body=n.toString()}else if(s.includes("multipart/form-data")){const n=new FormData;if(i.data instanceof FormData)i.data.forEach((o,c)=>{n.append(c,o)});else for(const o of Object.keys(i.data))n.append(o,i.data[o]);t.body=n;const a=new Headers(t.headers);a.delete("content-type"),t.headers=a}else(s.includes("application/json")||typeof i.data=="object")&&(t.body=JSON.stringify(i.data));return t};class ee extends S{async request(e){const t=Z(e,e.webFetchExtra),r=X(e.params,e.shouldEncodeUrlParams),s=r?`${e.url}?${r}`:e.url,n=await fetch(s,t),a=n.headers.get("content-type")||"";let{responseType:o="text"}=n.ok?e:{};a.includes("application/json")&&(o="json");let c,l;switch(o){case"arraybuffer":case"blob":l=await n.blob(),c=await z(l);break;case"json":c=await n.json();break;case"document":case"text":default:c=await n.text()}const D={};return n.headers.forEach((q,N)=>{D[N]=q}),{data:c,headers:D,status:n.status,url:n.url}}async get(e){return this.request(Object.assign(Object.assign({},e),{method:"GET"}))}async post(e){return this.request(Object.assign(Object.assign({},e),{method:"POST"}))}async put(e){return this.request(Object.assign(Object.assign({},e),{method:"PUT"}))}async patch(e){return this.request(Object.assign(Object.assign({},e),{method:"PATCH"}))}async delete(e){return this.request(Object.assign(Object.assign({},e),{method:"DELETE"}))}}P("CapacitorHttp",{web:()=>new ee});const te=P("App",{web:()=>Promise.resolve().then(()=>ie).then(i=>new i.AppWeb)});var E;(function(i){i.Prompt="PROMPT",i.Camera="CAMERA",i.Photos="PHOTOS"})(E||(E={}));var O;(function(i){i.Rear="REAR",i.Front="FRONT"})(O||(O={}));var A;(function(i){i.Uri="uri",i.Base64="base64",i.DataUrl="dataUrl"})(A||(A={})),P("Camera",{web:()=>Promise.resolve().then(()=>oe).then(i=>new i.CameraWeb)});class re{constructor(e){this.sqlite=e,this._connectionDict=new Map}async initWebStore(){try{return await this.sqlite.initWebStore(),Promise.resolve()}catch(e){return Promise.reject(e)}}async saveToStore(e){try{return await this.sqlite.saveToStore({database:e}),Promise.resolve()}catch(t){return Promise.reject(t)}}async saveToLocalDisk(e){try{return await this.sqlite.saveToLocalDisk({database:e}),Promise.resolve()}catch(t){return Promise.reject(t)}}async getFromLocalDiskToStore(e){const t=e??!0;try{return await this.sqlite.getFromLocalDiskToStore({overwrite:t}),Promise.resolve()}catch(r){return Promise.reject(r)}}async echo(e){try{const t=await this.sqlite.echo({value:e});return Promise.resolve(t)}catch(t){return Promise.reject(t)}}async isSecretStored(){try{const e=await this.sqlite.isSecretStored();return Promise.resolve(e)}catch(e){return Promise.reject(e)}}async setEncryptionSecret(e){try{return await this.sqlite.setEncryptionSecret({passphrase:e}),Promise.resolve()}catch(t){return Promise.reject(t)}}async changeEncryptionSecret(e,t){try{return await this.sqlite.changeEncryptionSecret({passphrase:e,oldpassphrase:t}),Promise.resolve()}catch(r){return Promise.reject(r)}}async clearEncryptionSecret(){try{return await this.sqlite.clearEncryptionSecret(),Promise.resolve()}catch(e){return Promise.reject(e)}}async checkEncryptionSecret(e){try{const t=await this.sqlite.checkEncryptionSecret({passphrase:e});return Promise.resolve(t)}catch(t){return Promise.reject(t)}}async addUpgradeStatement(e,t,r){const s={toVersion:t,statements:r};try{return e.endsWith(".db")&&(e=e.slice(0,-3)),await this.sqlite.addUpgradeStatement({database:e,upgrade:[s]}),Promise.resolve()}catch(n){return Promise.reject(n)}}async createConnection(e,t,r,s,n){try{e.endsWith(".db")&&(e=e.slice(0,-3)),await this.sqlite.createConnection({database:e,encrypted:t,mode:r,version:s,readonly:n});const a=new M(e,n,this.sqlite),o=n?`RO_${e}`:`RW_${e}`;return this._connectionDict.set(o,a),Promise.resolve(a)}catch(a){return Promise.reject(a)}}async closeConnection(e,t){try{e.endsWith(".db")&&(e=e.slice(0,-3)),await this.sqlite.closeConnection({database:e,readonly:t});const r=t?`RO_${e}`:`RW_${e}`;return this._connectionDict.delete(r),Promise.resolve()}catch(r){return Promise.reject(r)}}async isConnection(e,t){const r={};e.endsWith(".db")&&(e=e.slice(0,-3));const s=t?`RO_${e}`:`RW_${e}`;return r.result=this._connectionDict.has(s),Promise.resolve(r)}async retrieveConnection(e,t){e.endsWith(".db")&&(e=e.slice(0,-3));const r=t?`RO_${e}`:`RW_${e}`;if(this._connectionDict.has(r)){const s=this._connectionDict.get(r);return typeof s<"u"?Promise.resolve(s):Promise.reject(`Connection ${e} is undefined`)}else return Promise.reject(`Connection ${e} does not exist`)}async getNCDatabasePath(e,t){try{const r=await this.sqlite.getNCDatabasePath({path:e,database:t});return Promise.resolve(r)}catch(r){return Promise.reject(r)}}async createNCConnection(e,t){try{await this.sqlite.createNCConnection({databasePath:e,version:t});const r=new M(e,!0,this.sqlite),s=`RO_${e})`;return this._connectionDict.set(s,r),Promise.resolve(r)}catch(r){return Promise.reject(r)}}async closeNCConnection(e){try{await this.sqlite.closeNCConnection({databasePath:e});const t=`RO_${e})`;return this._connectionDict.delete(t),Promise.resolve()}catch(t){return Promise.reject(t)}}async isNCConnection(e){const t={},r=`RO_${e})`;return t.result=this._connectionDict.has(r),Promise.resolve(t)}async retrieveNCConnection(e){if(this._connectionDict.has(e)){const t=`RO_${e})`,r=this._connectionDict.get(t);return typeof r<"u"?Promise.resolve(r):Promise.reject(`Connection ${e} is undefined`)}else return Promise.reject(`Connection ${e} does not exist`)}async isNCDatabase(e){try{const t=await this.sqlite.isNCDatabase({databasePath:e});return Promise.resolve(t)}catch(t){return Promise.reject(t)}}async retrieveAllConnections(){return this._connectionDict}async closeAllConnections(){const e=new Map;try{for(const t of this._connectionDict.keys()){const r=t.substring(3),s=t.substring(0,3)==="RO_";await this.sqlite.closeConnection({database:r,readonly:s}),e.set(t,null)}for(const t of e.keys())this._connectionDict.delete(t);return Promise.resolve()}catch(t){return Promise.reject(t)}}async checkConnectionsConsistency(){try{const e=[...this._connectionDict.keys()],t=[],r=[];for(const n of e)t.push(n.substring(0,2)),r.push(n.substring(3));const s=await this.sqlite.checkConnectionsConsistency({dbNames:r,openModes:t});return s.result||(this._connectionDict=new Map),Promise.resolve(s)}catch(e){return this._connectionDict=new Map,Promise.reject(e)}}async importFromJson(e){try{const t=await this.sqlite.importFromJson({jsonstring:e});return Promise.resolve(t)}catch(t){return Promise.reject(t)}}async isJsonValid(e){try{const t=await this.sqlite.isJsonValid({jsonstring:e});return Promise.resolve(t)}catch(t){return Promise.reject(t)}}async copyFromAssets(e){const t=e??!0;try{return await this.sqlite.copyFromAssets({overwrite:t}),Promise.resolve()}catch(r){return Promise.reject(r)}}async getFromHTTPRequest(e,t){const r=t??!0;try{return await this.sqlite.getFromHTTPRequest({url:e,overwrite:r}),Promise.resolve()}catch(s){return Promise.reject(s)}}async isDatabaseEncrypted(e){e.endsWith(".db")&&(e=e.slice(0,-3));try{const t=await this.sqlite.isDatabaseEncrypted({database:e});return Promise.resolve(t)}catch(t){return Promise.reject(t)}}async isInConfigEncryption(){try{const e=await this.sqlite.isInConfigEncryption();return Promise.resolve(e)}catch(e){return Promise.reject(e)}}async isInConfigBiometricAuth(){try{const e=await this.sqlite.isInConfigBiometricAuth();return Promise.resolve(e)}catch(e){return Promise.reject(e)}}async isDatabase(e){e.endsWith(".db")&&(e=e.slice(0,-3));try{const t=await this.sqlite.isDatabase({database:e});return Promise.resolve(t)}catch(t){return Promise.reject(t)}}async getDatabaseList(){try{const t=(await this.sqlite.getDatabaseList()).values;t.sort();const r={values:t};return Promise.resolve(r)}catch(e){return Promise.reject(e)}}async getMigratableDbList(e){if(!e||e.length===0)return Promise.reject("You must provide a folder path");try{const t=await this.sqlite.getMigratableDbList({folderPath:e});return Promise.resolve(t)}catch(t){return Promise.reject(t)}}async addSQLiteSuffix(e,t){const r=e||"default",s=t||[];try{const n=await this.sqlite.addSQLiteSuffix({folderPath:r,dbNameList:s});return Promise.resolve(n)}catch(n){return Promise.reject(n)}}async deleteOldDatabases(e,t){const r=e||"default",s=t||[];try{const n=await this.sqlite.deleteOldDatabases({folderPath:r,dbNameList:s});return Promise.resolve(n)}catch(n){return Promise.reject(n)}}async moveDatabasesAndAddSuffix(e,t){const r=e||"default",s=t||[];return this.sqlite.moveDatabasesAndAddSuffix({folderPath:r,dbNameList:s})}}class M{constructor(e,t,r){this.dbName=e,this.readonly=t,this.sqlite=r}getConnectionDBName(){return this.dbName}getConnectionReadOnly(){return this.readonly}async open(){try{return await this.sqlite.open({database:this.dbName,readonly:this.readonly}),Promise.resolve()}catch(e){return Promise.reject(e)}}async close(){try{return await this.sqlite.close({database:this.dbName,readonly:this.readonly}),Promise.resolve()}catch(e){return Promise.reject(e)}}async beginTransaction(){try{const e=await this.sqlite.beginTransaction({database:this.dbName});return Promise.resolve(e)}catch(e){return Promise.reject(e)}}async commitTransaction(){try{const e=await this.sqlite.commitTransaction({database:this.dbName});return Promise.resolve(e)}catch(e){return Promise.reject(e)}}async rollbackTransaction(){try{const e=await this.sqlite.rollbackTransaction({database:this.dbName});return Promise.resolve(e)}catch(e){return Promise.reject(e)}}async isTransactionActive(){try{const e=await this.sqlite.isTransactionActive({database:this.dbName});return Promise.resolve(e)}catch(e){return Promise.reject(e)}}async loadExtension(e){try{return await this.sqlite.loadExtension({database:this.dbName,path:e,readonly:this.readonly}),Promise.resolve()}catch(t){return Promise.reject(t)}}async enableLoadExtension(e){try{return await this.sqlite.enableLoadExtension({database:this.dbName,toggle:e,readonly:this.readonly}),Promise.resolve()}catch(t){return Promise.reject(t)}}async getUrl(){try{const e=await this.sqlite.getUrl({database:this.dbName,readonly:this.readonly});return Promise.resolve(e)}catch(e){return Promise.reject(e)}}async getVersion(){try{const e=await this.sqlite.getVersion({database:this.dbName,readonly:this.readonly});return Promise.resolve(e)}catch(e){return Promise.reject(e)}}async getTableList(){try{const e=await this.sqlite.getTableList({database:this.dbName,readonly:this.readonly});return Promise.resolve(e)}catch(e){return Promise.reject(e)}}async execute(e,t=!0,r=!0){try{if(this.readonly)return Promise.reject("not allowed in read-only mode");{const s=await this.sqlite.execute({database:this.dbName,statements:e,transaction:t,readonly:!1,isSQL92:r});return Promise.resolve(s)}}catch(s){return Promise.reject(s)}}async query(e,t,r=!0){let s;try{return t&&t.length>0?s=await this.sqlite.query({database:this.dbName,statement:e,values:t,readonly:this.readonly,isSql92:!0}):s=await this.sqlite.query({database:this.dbName,statement:e,values:[],readonly:this.readonly,isSQL92:r}),s=await this.reorderRows(s),Promise.resolve(s)}catch(n){return Promise.reject(n)}}async run(e,t,r=!0,s="no",n=!0){let a;try{if(this.readonly)return Promise.reject("not allowed in read-only mode");if(t&&t.length>0){const o=e.toUpperCase().includes("RETURNING")?s:"no";a=await this.sqlite.run({database:this.dbName,statement:e,values:t,transaction:r,readonly:!1,returnMode:o,isSQL92:!0})}else{const o=e.toUpperCase().includes("RETURNING")?s:"no";a=await this.sqlite.run({database:this.dbName,statement:e,values:[],transaction:r,readonly:!1,returnMode:o,isSQL92:n})}return a.changes=await this.reorderRows(a.changes),Promise.resolve(a)}catch(o){return Promise.reject(o)}}async executeSet(e,t=!0,r="no",s=!0){let n;try{return this.readonly?Promise.reject("not allowed in read-only mode"):(n=await this.sqlite.executeSet({database:this.dbName,set:e,transaction:t,readonly:!1,returnMode:r,isSQL92:s}),n.changes=await this.reorderRows(n.changes),Promise.resolve(n))}catch(a){return Promise.reject(a)}}async isExists(){try{const e=await this.sqlite.isDBExists({database:this.dbName,readonly:this.readonly});return Promise.resolve(e)}catch(e){return Promise.reject(e)}}async isTable(e){try{const t=await this.sqlite.isTableExists({database:this.dbName,table:e,readonly:this.readonly});return Promise.resolve(t)}catch(t){return Promise.reject(t)}}async isDBOpen(){try{const e=await this.sqlite.isDBOpen({database:this.dbName,readonly:this.readonly});return Promise.resolve(e)}catch(e){return Promise.reject(e)}}async delete(){try{return this.readonly?Promise.reject("not allowed in read-only mode"):(await this.sqlite.deleteDatabase({database:this.dbName,readonly:!1}),Promise.resolve())}catch(e){return Promise.reject(e)}}async createSyncTable(){try{if(this.readonly)return Promise.reject("not allowed in read-only mode");{const e=await this.sqlite.createSyncTable({database:this.dbName,readonly:!1});return Promise.resolve(e)}}catch(e){return Promise.reject(e)}}async setSyncDate(e){try{return this.readonly?Promise.reject("not allowed in read-only mode"):(await this.sqlite.setSyncDate({database:this.dbName,syncdate:e,readonly:!1}),Promise.resolve())}catch(t){return Promise.reject(t)}}async getSyncDate(){try{const e=await this.sqlite.getSyncDate({database:this.dbName,readonly:this.readonly});let t="";return e.syncDate>0&&(t=new Date(e.syncDate*1e3).toISOString()),Promise.resolve(t)}catch(e){return Promise.reject(e)}}async exportToJson(e){try{const t=await this.sqlite.exportToJson({database:this.dbName,jsonexportmode:e,readonly:this.readonly});return Promise.resolve(t)}catch(t){return Promise.reject(t)}}async deleteExportedRows(){try{return this.readonly?Promise.reject("not allowed in read-only mode"):(await this.sqlite.deleteExportedRows({database:this.dbName,readonly:!1}),Promise.resolve())}catch(e){return Promise.reject(e)}}async executeTransaction(e,t=!0){let r=0,s=!1;if(this.readonly)return Promise.reject("not allowed in read-only mode");try{if(await this.sqlite.beginTransaction({database:this.dbName}),s=await this.sqlite.isTransactionActive({database:this.dbName}),!s)return Promise.reject("After Begin Transaction, no transaction active")}catch(n){return Promise.reject(n)}try{for(const a of e)if(a.values&&a.values.length>0){const o=a.statement.toUpperCase().includes("RETURNING")?"all":"no",c=await this.sqlite.run({database:this.dbName,statement:a.statement,values:a.values,transaction:!1,readonly:!1,returnMode:o,isSQL92:t});if(c.changes.changes<=0)throw new Error("Error in transaction method run ");r+=c.changes.changes}else{const o=await this.sqlite.execute({database:this.dbName,statements:a.statement,transaction:!1,readonly:!1});if(s=await this.sqlite.isTransactionActive({database:this.dbName}),o.changes.changes<0)throw new Error("Error in transaction method execute ");r+=o.changes.changes}if(s=await this.sqlite.isTransactionActive({database:this.dbName}),s){const a=await this.sqlite.commitTransaction({database:this.dbName});r+=a.changes.changes}const n={changes:{changes:r}};return Promise.resolve(n)}catch(n){const a=n.message?n.message:n;return s=await this.sqlite.isTransactionActive({database:this.dbName}),s&&await this.sqlite.rollbackTransaction({database:this.dbName}),Promise.reject(a)}}async reorderRows(e){const t=e;if(e!=null&&e.values&&typeof e.values[0]=="object"&&Object.keys(e.values[0]).includes("ios_columns")){const r=e.values[0].ios_columns,s=[];for(let n=1;n<e.values.length;n++){const a=e.values[n],o={};for(const c of r)o[c]=a[c];s.push(o)}t.values=s}return Promise.resolve(t)}}const se=P("CapacitorSQLite",{web:()=>Promise.resolve().then(()=>le).then(i=>new i.CapacitorSQLiteWeb),electron:()=>window.CapacitorCustomPlatform.plugins.CapacitorSQLite});P("Preferences",{web:()=>Promise.resolve().then(()=>he).then(i=>new i.PreferencesWeb)}),window.CapacitorBridge={App:te,CapacitorSQLite:se,SQLiteConnection:re,CameraResultType:A},window.CapacitorBridge.pushNotificatonToken="",L.isNativePlatform()?console.log("I'm a native app!"):console.log("I'm a PWA or Web app!");class ne extends S{constructor(){super(),this.handleVisibilityChange=()=>{const e={isActive:document.hidden!==!0};this.notifyListeners("appStateChange",e),document.hidden?this.notifyListeners("pause",null):this.notifyListeners("resume",null)},document.addEventListener("visibilitychange",this.handleVisibilityChange,!1)}exitApp(){throw this.unimplemented("Not implemented on web.")}async getInfo(){throw this.unimplemented("Not implemented on web.")}async getLaunchUrl(){return{url:""}}async getState(){return{isActive:document.hidden!==!0}}async minimizeApp(){throw this.unimplemented("Not implemented on web.")}}const ie=Object.freeze(Object.defineProperty({__proto__:null,AppWeb:ne},Symbol.toStringTag,{value:"Module"}));class F extends S{async getPhoto(e){return new Promise(async(t,r)=>{if(e.webUseInput||e.source===E.Photos)this.fileInputExperience(e,t);else if(e.source===E.Prompt){let s=document.querySelector("pwa-action-sheet");s||(s=document.createElement("pwa-action-sheet"),document.body.appendChild(s)),s.header=e.promptLabelHeader||"Photo",s.cancelable=!1,s.options=[{title:e.promptLabelPhoto||"From Photos"},{title:e.promptLabelPicture||"Take Picture"}],s.addEventListener("onSelection",async n=>{n.detail===0?this.fileInputExperience(e,t):this.cameraExperience(e,t,r)})}else this.cameraExperience(e,t,r)})}async pickImages(e){return new Promise(async t=>{this.multipleFileInputExperience(t)})}async cameraExperience(e,t,r){if(customElements.get("pwa-camera-modal")){const s=document.createElement("pwa-camera-modal");s.facingMode=e.direction===O.Front?"user":"environment",document.body.appendChild(s);try{await s.componentOnReady(),s.addEventListener("onPhoto",async n=>{const a=n.detail;a===null?r(new x("User cancelled photos app")):a instanceof Error?r(a):t(await this._getCameraPhoto(a,e)),s.dismiss(),document.body.removeChild(s)}),s.present()}catch{this.fileInputExperience(e,t)}}else console.error("Unable to load PWA Element 'pwa-camera-modal'. See the docs: https://capacitorjs.com/docs/web/pwa-elements."),this.fileInputExperience(e,t)}fileInputExperience(e,t){let r=document.querySelector("#_capacitor-camera-input");const s=()=>{var n;(n=r.parentNode)===null||n===void 0||n.removeChild(r)};r||(r=document.createElement("input"),r.id="_capacitor-camera-input",r.type="file",r.hidden=!0,document.body.appendChild(r),r.addEventListener("change",n=>{const a=r.files[0];let o="jpeg";if(a.type==="image/png"?o="png":a.type==="image/gif"&&(o="gif"),e.resultType==="dataUrl"||e.resultType==="base64"){const c=new FileReader;c.addEventListener("load",()=>{if(e.resultType==="dataUrl")t({dataUrl:c.result,format:o});else if(e.resultType==="base64"){const l=c.result.split(",")[1];t({base64String:l,format:o})}s()}),c.readAsDataURL(a)}else t({webPath:URL.createObjectURL(a),format:o}),s()})),r.accept="image/*",r.capture=!0,e.source===E.Photos||e.source===E.Prompt?r.removeAttribute("capture"):e.direction===O.Front?r.capture="user":e.direction===O.Rear&&(r.capture="environment"),r.click()}multipleFileInputExperience(e){let t=document.querySelector("#_capacitor-camera-input-multiple");const r=()=>{var s;(s=t.parentNode)===null||s===void 0||s.removeChild(t)};t||(t=document.createElement("input"),t.id="_capacitor-camera-input-multiple",t.type="file",t.hidden=!0,t.multiple=!0,document.body.appendChild(t),t.addEventListener("change",s=>{const n=[];for(let a=0;a<t.files.length;a++){const o=t.files[a];let c="jpeg";o.type==="image/png"?c="png":o.type==="image/gif"&&(c="gif"),n.push({webPath:URL.createObjectURL(o),format:c})}e({photos:n}),r()})),t.accept="image/*",t.click()}_getCameraPhoto(e,t){return new Promise((r,s)=>{const n=new FileReader,a=e.type.split("/")[1];t.resultType==="uri"?r({webPath:URL.createObjectURL(e),format:a,saved:!1}):(n.readAsDataURL(e),n.onloadend=()=>{const o=n.result;t.resultType==="dataUrl"?r({dataUrl:o,format:a,saved:!1}):r({base64String:o.split(",")[1],format:a,saved:!1})},n.onerror=o=>{s(o)})})}async checkPermissions(){if(typeof navigator>"u"||!navigator.permissions)throw this.unavailable("Permissions API not available in this browser");try{return{camera:(await window.navigator.permissions.query({name:"camera"})).state,photos:"granted"}}catch{throw this.unavailable("Camera permissions are not available in this browser")}}async requestPermissions(){throw this.unimplemented("Not implemented on web.")}async pickLimitedLibraryPhotos(){throw this.unavailable("Not implemented on web.")}async getLimitedLibraryPhotos(){throw this.unavailable("Not implemented on web.")}}const ae=new F,oe=Object.freeze(Object.defineProperty({__proto__:null,Camera:ae,CameraWeb:F},Symbol.toStringTag,{value:"Module"}));class ce extends S{constructor(){super(...arguments),this.jeepSqliteElement=null,this.isWebStoreOpen=!1}async initWebStore(){await customElements.whenDefined("jeep-sqlite"),this.jeepSqliteElement=document.querySelector("jeep-sqlite"),this.ensureJeepSqliteIsAvailable(),this.jeepSqliteElement.addEventListener("jeepSqliteImportProgress",e=>{this.notifyListeners("sqliteImportProgressEvent",e.detail)}),this.jeepSqliteElement.addEventListener("jeepSqliteExportProgress",e=>{this.notifyListeners("sqliteExportProgressEvent",e.detail)}),this.jeepSqliteElement.addEventListener("jeepSqliteHTTPRequestEnded",e=>{this.notifyListeners("sqliteHTTPRequestEndedEvent",e.detail)}),this.jeepSqliteElement.addEventListener("jeepSqlitePickDatabaseEnded",e=>{this.notifyListeners("sqlitePickDatabaseEndedEvent",e.detail)}),this.jeepSqliteElement.addEventListener("jeepSqliteSaveDatabaseToDisk",e=>{this.notifyListeners("sqliteSaveDatabaseToDiskEvent",e.detail)}),this.isWebStoreOpen||(this.isWebStoreOpen=await this.jeepSqliteElement.isStoreOpen())}async saveToStore(e){this.ensureJeepSqliteIsAvailable(),this.ensureWebstoreIsOpen();try{await this.jeepSqliteElement.saveToStore(e);return}catch(t){throw new Error(`${t}`)}}async getFromLocalDiskToStore(e){this.ensureJeepSqliteIsAvailable(),this.ensureWebstoreIsOpen();try{await this.jeepSqliteElement.getFromLocalDiskToStore(e);return}catch(t){throw new Error(`${t}`)}}async saveToLocalDisk(e){this.ensureJeepSqliteIsAvailable(),this.ensureWebstoreIsOpen();try{await this.jeepSqliteElement.saveToLocalDisk(e);return}catch(t){throw new Error(`${t}`)}}async echo(e){return this.ensureJeepSqliteIsAvailable(),await this.jeepSqliteElement.echo(e)}async createConnection(e){this.ensureJeepSqliteIsAvailable(),this.ensureWebstoreIsOpen();try{await this.jeepSqliteElement.createConnection(e);return}catch(t){throw new Error(`${t}`)}}async open(e){this.ensureJeepSqliteIsAvailable(),this.ensureWebstoreIsOpen();try{await this.jeepSqliteElement.open(e);return}catch(t){throw new Error(`${t}`)}}async closeConnection(e){this.ensureJeepSqliteIsAvailable(),this.ensureWebstoreIsOpen();try{await this.jeepSqliteElement.closeConnection(e);return}catch(t){throw new Error(`${t}`)}}async getVersion(e){this.ensureJeepSqliteIsAvailable(),this.ensureWebstoreIsOpen();try{return await this.jeepSqliteElement.getVersion(e)}catch(t){throw new Error(`${t}`)}}async checkConnectionsConsistency(e){this.ensureJeepSqliteIsAvailable();try{return await this.jeepSqliteElement.checkConnectionsConsistency(e)}catch(t){throw new Error(`${t}`)}}async close(e){this.ensureJeepSqliteIsAvailable(),this.ensureWebstoreIsOpen();try{await this.jeepSqliteElement.close(e);return}catch(t){throw new Error(`${t}`)}}async beginTransaction(e){this.ensureJeepSqliteIsAvailable(),this.ensureWebstoreIsOpen();try{return await this.jeepSqliteElement.beginTransaction(e)}catch(t){throw new Error(`${t}`)}}async commitTransaction(e){this.ensureJeepSqliteIsAvailable(),this.ensureWebstoreIsOpen();try{return await this.jeepSqliteElement.commitTransaction(e)}catch(t){throw new Error(`${t}`)}}async rollbackTransaction(e){this.ensureJeepSqliteIsAvailable(),this.ensureWebstoreIsOpen();try{return await this.jeepSqliteElement.rollbackTransaction(e)}catch(t){throw new Error(`${t}`)}}async isTransactionActive(e){this.ensureJeepSqliteIsAvailable(),this.ensureWebstoreIsOpen();try{return await this.jeepSqliteElement.isTransactionActive(e)}catch(t){throw new Error(`${t}`)}}async getTableList(e){this.ensureJeepSqliteIsAvailable(),this.ensureWebstoreIsOpen();try{return await this.jeepSqliteElement.getTableList(e)}catch(t){throw new Error(`${t}`)}}async execute(e){this.ensureJeepSqliteIsAvailable(),this.ensureWebstoreIsOpen();try{return await this.jeepSqliteElement.execute(e)}catch(t){throw new Error(`${t}`)}}async executeSet(e){this.ensureJeepSqliteIsAvailable(),this.ensureWebstoreIsOpen();try{return await this.jeepSqliteElement.executeSet(e)}catch(t){throw new Error(`${t}`)}}async run(e){this.ensureJeepSqliteIsAvailable(),this.ensureWebstoreIsOpen();try{return await this.jeepSqliteElement.run(e)}catch(t){throw new Error(`${t}`)}}async query(e){this.ensureJeepSqliteIsAvailable(),this.ensureWebstoreIsOpen();try{return await this.jeepSqliteElement.query(e)}catch(t){throw new Error(`${t}`)}}async isDBExists(e){this.ensureJeepSqliteIsAvailable(),this.ensureWebstoreIsOpen();try{return await this.jeepSqliteElement.isDBExists(e)}catch(t){throw new Error(`${t}`)}}async isDBOpen(e){this.ensureJeepSqliteIsAvailable(),this.ensureWebstoreIsOpen();try{return await this.jeepSqliteElement.isDBOpen(e)}catch(t){throw new Error(`${t}`)}}async isDatabase(e){this.ensureJeepSqliteIsAvailable(),this.ensureWebstoreIsOpen();try{return await this.jeepSqliteElement.isDatabase(e)}catch(t){throw new Error(`${t}`)}}async isTableExists(e){this.ensureJeepSqliteIsAvailable(),this.ensureWebstoreIsOpen();try{return await this.jeepSqliteElement.isTableExists(e)}catch(t){throw new Error(`${t}`)}}async deleteDatabase(e){this.ensureJeepSqliteIsAvailable(),this.ensureWebstoreIsOpen();try{await this.jeepSqliteElement.deleteDatabase(e);return}catch(t){throw new Error(`${t}`)}}async isJsonValid(e){this.ensureJeepSqliteIsAvailable(),this.ensureWebstoreIsOpen();try{return await this.jeepSqliteElement.isJsonValid(e)}catch(t){throw new Error(`${t}`)}}async importFromJson(e){this.ensureJeepSqliteIsAvailable(),this.ensureWebstoreIsOpen();try{return await this.jeepSqliteElement.importFromJson(e)}catch(t){throw new Error(`${t}`)}}async exportToJson(e){this.ensureJeepSqliteIsAvailable(),this.ensureWebstoreIsOpen();try{return await this.jeepSqliteElement.exportToJson(e)}catch(t){throw new Error(`${t}`)}}async createSyncTable(e){this.ensureJeepSqliteIsAvailable(),this.ensureWebstoreIsOpen();try{return await this.jeepSqliteElement.createSyncTable(e)}catch(t){throw new Error(`${t}`)}}async setSyncDate(e){this.ensureJeepSqliteIsAvailable(),this.ensureWebstoreIsOpen();try{await this.jeepSqliteElement.setSyncDate(e);return}catch(t){throw new Error(`${t}`)}}async getSyncDate(e){this.ensureJeepSqliteIsAvailable(),this.ensureWebstoreIsOpen();try{return await this.jeepSqliteElement.getSyncDate(e)}catch(t){throw new Error(`${t}`)}}async deleteExportedRows(e){this.ensureJeepSqliteIsAvailable(),this.ensureWebstoreIsOpen();try{await this.jeepSqliteElement.deleteExportedRows(e);return}catch(t){throw new Error(`${t}`)}}async addUpgradeStatement(e){this.ensureJeepSqliteIsAvailable(),this.ensureWebstoreIsOpen();try{await this.jeepSqliteElement.addUpgradeStatement(e);return}catch(t){throw new Error(`${t}`)}}async copyFromAssets(e){this.ensureJeepSqliteIsAvailable(),this.ensureWebstoreIsOpen();try{await this.jeepSqliteElement.copyFromAssets(e);return}catch(t){throw new Error(`${t}`)}}async getFromHTTPRequest(e){this.ensureJeepSqliteIsAvailable(),this.ensureWebstoreIsOpen();try{await this.jeepSqliteElement.getFromHTTPRequest(e);return}catch(t){throw new Error(`${t}`)}}async getDatabaseList(){this.ensureJeepSqliteIsAvailable(),this.ensureWebstoreIsOpen();try{return await this.jeepSqliteElement.getDatabaseList()}catch(e){throw new Error(`${e}`)}}ensureJeepSqliteIsAvailable(){if(this.jeepSqliteElement===null)throw new Error("The jeep-sqlite element is not present in the DOM! Please check the @capacitor-community/sqlite documentation for instructions regarding the web platform.")}ensureWebstoreIsOpen(){if(!this.isWebStoreOpen)throw new Error('WebStore is not open yet. You have to call "initWebStore()" first.')}async getUrl(){throw this.unimplemented("Not implemented on web.")}async getMigratableDbList(e){throw console.log("getMigratableDbList",e),this.unimplemented("Not implemented on web.")}async addSQLiteSuffix(e){throw console.log("addSQLiteSuffix",e),this.unimplemented("Not implemented on web.")}async deleteOldDatabases(e){throw console.log("deleteOldDatabases",e),this.unimplemented("Not implemented on web.")}async moveDatabasesAndAddSuffix(e){throw console.log("moveDatabasesAndAddSuffix",e),this.unimplemented("Not implemented on web.")}async isSecretStored(){throw this.unimplemented("Not implemented on web.")}async setEncryptionSecret(e){throw console.log("setEncryptionSecret",e),this.unimplemented("Not implemented on web.")}async changeEncryptionSecret(e){throw console.log("changeEncryptionSecret",e),this.unimplemented("Not implemented on web.")}async clearEncryptionSecret(){throw console.log("clearEncryptionSecret"),this.unimplemented("Not implemented on web.")}async checkEncryptionSecret(e){throw console.log("checkEncryptionPassPhrase",e),this.unimplemented("Not implemented on web.")}async getNCDatabasePath(e){throw console.log("getNCDatabasePath",e),this.unimplemented("Not implemented on web.")}async createNCConnection(e){throw console.log("createNCConnection",e),this.unimplemented("Not implemented on web.")}async closeNCConnection(e){throw console.log("closeNCConnection",e),this.unimplemented("Not implemented on web.")}async isNCDatabase(e){throw console.log("isNCDatabase",e),this.unimplemented("Not implemented on web.")}async isDatabaseEncrypted(e){throw console.log("isDatabaseEncrypted",e),this.unimplemented("Not implemented on web.")}async isInConfigEncryption(){throw this.unimplemented("Not implemented on web.")}async isInConfigBiometricAuth(){throw this.unimplemented("Not implemented on web.")}async loadExtension(e){throw console.log("loadExtension",e),this.unimplemented("Not implemented on web.")}async enableLoadExtension(e){throw console.log("enableLoadExtension",e),this.unimplemented("Not implemented on web.")}}const le=Object.freeze(Object.defineProperty({__proto__:null,CapacitorSQLiteWeb:ce},Symbol.toStringTag,{value:"Module"}));class ue extends S{constructor(){super(...arguments),this.group="CapacitorStorage"}async configure({group:e}){typeof e=="string"&&(this.group=e)}async get(e){return{value:this.impl.getItem(this.applyPrefix(e.key))}}async set(e){this.impl.setItem(this.applyPrefix(e.key),e.value)}async remove(e){this.impl.removeItem(this.applyPrefix(e.key))}async keys(){return{keys:this.rawKeys().map(t=>t.substring(this.prefix.length))}}async clear(){for(const e of this.rawKeys())this.impl.removeItem(e)}async migrate(){var e;const t=[],r=[],s="_cap_",n=Object.keys(this.impl).filter(a=>a.indexOf(s)===0);for(const a of n){const o=a.substring(s.length),c=(e=this.impl.getItem(a))!==null&&e!==void 0?e:"",{value:l}=await this.get({key:o});typeof l=="string"?r.push(o):(await this.set({key:o,value:c}),t.push(o))}return{migrated:t,existing:r}}async removeOld(){const e="_cap_",t=Object.keys(this.impl).filter(r=>r.indexOf(e)===0);for(const r of t)this.impl.removeItem(r)}get impl(){return window.localStorage}get prefix(){return this.group==="NativeStorage"?"":`${this.group}.`}rawKeys(){return Object.keys(this.impl).filter(e=>e.indexOf(this.prefix)===0)}applyPrefix(e){return this.prefix+e}}const he=Object.freeze(Object.defineProperty({__proto__:null,PreferencesWeb:ue},Symbol.toStringTag,{value:"Module"}))});
